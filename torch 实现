
import torch

# f= w*x
# f = 2*x

X = torch.tensor([1,2,3,4],dtype=torch.float32)
Y = torch.tensor([2,4,6,8],dtype=torch.float32)

# w = 0.0 

w = torch.tensor(0.0, dtype=torch.float32, requires_grad= True)

# model prediction
def forward(x):
    return w*x

#loss = MSE
def loss(y,y_predicted):
    return((y_predicted-y)**2).mean()

# #gradient
# #MSE = 1/N *(W*-Y)**2
# #dJ/dw = 1/N 2*(w*x-y)

# def gradient(x,y, y_predicted):
#     return np.dot(2*x, y_predicted-y).mean()

print(f'Prediction before training； f(5) = {forward(5):.3f}')

learning_rate = 0.02  #学习效率
n_iters = 100  #迭代次数

for epoch in range(n_iters):
    y_pred = forward(X)
    l = loss(Y,y_pred)

    l.backward() 

    with torch.no_grad():
       
        w -= learning_rate*w.grad

    w.grad.zero_()

    if epoch % 10 == 0:
        print(f'epoch {epoch+1}: w = {w:.3f}, loss = {l:.8f}')

print(f'Prediction after training； f(5) = {forward(5):.3f}')

